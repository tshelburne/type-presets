@use 'sass:map';
@use 'sass:list';

/// Default font family property value to use in presets
/// @access public
/// @type font-family
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $default-family: 'Arial, sans-serif'
///   );
$default-family: unset !default;

/// Default font weight property value to use in presets
/// @access public
/// @type font-family
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $default-weight: 500
///   );
$default-weight: normal !default;

/// Default text transform property value to use in presets
/// @access public
/// @type font-family
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $default-transform: uppercase
///   );
$default-transform: none !default;

/// Default letter spacing property value to use in presets
/// @access public
/// @type font-family
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $default-spacing: .5
///   );
$default-spacing: normal !default;

/// Default breakpoints to be used for responsive typescales
/// @access public
/// @type Map
$breakpoints: (
	xs: 0,
	sm: 600px,
	md: 900px,
	lg: 1200px,
	xl: 1800px,
) !default;

/// A map of basic typescale definitions
/// @access public
/// @type Map
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $typescales: (
///       1: 12px (md: 14px, xl: 16px),
///       2: 14px (lg: 20px),
///     )
///   );
$typescales: () !default;

/// A map of basic preset definitions
/// @access public
/// @type Map
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $presets: (
///       1: (scale: 1, spacing: .5),
///       2: (scale: 1, family: 'Comic Sans', transform: uppercase),
///       3: (scale: 2, family: 'Comic Sans', weight: 800),
///     )
///   );
$presets: () !default;

// ================================= HELPERS ==================================

@function __map-get-default($map, $key, $def) {
	@return if(map.has-key($map, $key), map.get($map, $key), $def);
}

// =============================== DEFINITIONS ================================

@function __define-typescale($xs, $scaled: ()) {
	$sm: __map-get-default($scaled, sm, $xs);
	$md: __map-get-default($scaled, md, $sm);
	$lg: __map-get-default($scaled, lg, $md);
	$xl: __map-get-default($scaled, xl, $lg);
	$sizes: $xs $sm $md $lg $xl;

	$scales: ();
	@for $i from 1 through list.length($sizes) {
		$size: list.nth($sizes, $i);
		$media: list.nth(map.keys($breakpoints), $i);
		$scale: (
			font-size: $size,
			line-height: $size + 8,
		);
		$scales: map.merge(
			$scales,
			(
				$media: $scale,
			)
		);
	}
	@return $scales;
}

@function __define-type-preset($def) {
	@return (
		scale: map.get($def, scale),
		font-family: __map-get-default($def, family, $default-family),
		font-weight: __map-get-default($def, weight, $default-weight),
		text-transform: __map-get-default($def, transform, $default-transform),
		letter-spacing: __map-get-default($def, spacing, $default-spacing)
	);
}

// ================================== MIXINS ==================================

$__typescales: ();
@each $key, $def in $typescales {
	$xs: list.nth($def, 1);
	$scaled: list.nth($def, 2);
	$new-scale: __define-typescale($xs, $scaled);
	$__typescales: map.merge($__typescales, ($key: $new-scale));
}

$__presets: ();
@each $key, $def in $presets {
	$new-preset: __define-type-preset($def);
	$__presets: map.merge($__presets, ($key: $new-preset));
}

/// Use typescale in typographic element
/// @access public
/// @param {string} $key - name of pre-defined typescale from map
/// @param {bool} $important [false] - mark properties as !important in CSS
/// @example scss - Usage
///   @use 'type-presets' as t;
///
///   p {
///     @include t.typescale(1);
///   }
/// @example css - Result
///   p {
///     font-size: var(--typescale-1-font-size);
///     line-height: var(--typescale-1-line-height);
///   }
@mixin typescale($key, $important: false) {
	$postfix: if($important, '!important', '');

	font-size: var(--typescale-#{$key}-font-size)#{$postfix};
	line-height: var(--typescale-#{$key}-line-height)#{$postfix};
}

/// Use type-preset in typographic element
/// @access public
/// @param {string} $key - name of pre-defined type preset from map
/// @param {bool} $important [false] - mark properties as !important in CSS
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $presets: (
///       1: (scale: 1, spacing: .5),
///     )
///   );
///
///   p {
///     @include t.type-preset(1);
///   }
/// @example css - Result
///   p {
///     font-size: var(--typescale-1-font-size);
///     line-height: var(--typescale-1-line-height);
///     font-family: unset;
///     font-weight: normal;
///     text-transform: none;
///     letter-spacing: 0.5;
///   }
@mixin type-preset($key, $important: false) {
	$preset: map.get($__presets, $key);
	$postfix: if($important, ' !important', '');

	@include typescale(map.get($preset, 'scale'), $important);
	font-family: #{map.get($preset, 'font-family')}#{$postfix};
	font-weight: #{map.get($preset, 'font-weight')}#{$postfix};
	text-transform: #{map.get($preset, 'text-transform')}#{$postfix};
	letter-spacing: #{map.get($preset, 'letter-spacing')}#{$postfix};
}

/// Generate utility classes
/// @access public
/// @param {string} $namespace [''] - namespace to put utility under
/// @example scss - Usage
///   @use 'type-presets' as t with (
///     $typescales: (
///       1: 12px (md: 14px, xl: 16px),
///     ),
///     $presets: (
///       1: (scale: 1, spacing: .5),
///     )
///   );
///
///   @include t.utility-classes($namespace: );
/// @example css - Result
///   .test-u-typescale-1 {
///     font-size: var(--typescale-1-font-size) !important;
///     line-height: var(--typescale-1-line-height) !important;
///   }
///
///   .test-u-type-preset-1 {
///     font-size: var(--typescale-1-font-size) !important;
///     line-height: var(--typescale-1-line-height) !important;
///     font-family: unset !important;
///     font-weight: normal !important;
///     text-transform: none !important;
///     letter-spacing: 0.5 !important;
///   }
@mixin utility-classes($namespace: '') {
	$prefix: if($namespace == '', '', '#{$namespace}-');

	@each $key in map.keys($__typescales) {
		.#{$prefix}u-typescale-#{$key} {
			@include typescale($key, $important: true);
		}
	}

	@each $key in map.keys($__presets) {
		.#{$prefix}u-type-preset-#{$key} {
			@include type-preset($key, $important: true);
		}
	}
}

// =================================== INIT ===================================

:root {
	@each $bp, $size in $breakpoints {
		@media screen and (min-width: $size) {
			@each $key, $def in $__typescales {
				$scale: map.get(map.get($__typescales, $key), $bp);

				--typescale-#{$key}-font-size: #{map.get($scale, font-size)};
				--typescale-#{$key}-line-height: #{map.get($scale, line-height)};
			}
		}
	}
}
